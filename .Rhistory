xtable(S, digits=2)
round( rnorm(3,0,.10) %*% S, 3)
library(xtable)
################### H1
H = matrix(0, 3, 7)
H[1,1] = H[2,2:3] = H[3,4:7] = 1
n = nrow(H)
Z = eigen( matrix(1,n,n) )$vectors[,-1]
S1 = t(Z) %*% H
xtable(S1, digits=2)
##################### H2
H = matrix(0, 4, 7)
H[1,2] = H[2,3] = H[3,4:5] = H[4,6:7] = 1
n = nrow(H)
Z = eigen( matrix(1,n,n) )$vectors[,-1]
S2 = t(Z) %*% H
xtable(S2, digits=2)
##################### H3
H = matrix(0, 4, 7)
H[1,4] = H[2,5] = H[3,6] = H[4,7] = 1
n = nrow(H)
Z = eigen( matrix(1,n,n) )$vectors[,-1]
S3 = t(Z) %*% H
xtable(S3, digits=2)
##########################
rnorm( nrow(S1), 0, .10) %*% S1 +
rnorm( nrow(S2), 0, .10) %*% S2 +
rnorm( nrow(S3), 0, .10) %*% S3
matrix( rnorm( 4000*nrow(S1), 0, .10), ncol=nrow(S1)) %*% S1
u = matrix( rnorm( 4000*nrow(S1), 0, .10), ncol=nrow(S1)) %*% S1 +
matrix( rnorm( 4000*nrow(S2), 0, .10), ncol=nrow(S1)) %*% S2 +
matrix( rnorm( 4000*nrow(S3), 0, .10), ncol=nrow(S1)) %*% S3
u =
matrix( rnorm( 4000*nrow(S1), 0, .10), ncol=nrow(S1)) %*% S1 +
matrix( rnorm( 4000*nrow(S2), 0, .10), ncol=nrow(S2)) %*% S2 +
matrix( rnorm( 4000*nrow(S3), 0, .10), ncol=nrow(S3)) %*% S3
dim(u)
cov(u)
cor(u)
round(cor(u),3)
H = matrix(0,5,11)
H[1,1:3] = H[2,4:5] = H[3,6:7] = H[4,8:9] = H[5,10:11] = 1
H
qr(H$rank)
qr(H)$rank
Z = eigen(crossprod(H))$vectors[,-(1:5)]
Z
round(Z,3)
Z %*% rnorm(6)
round( Z %*% rnorm(6), 2)
round( Z %*% rnorm(6,0,.1), 2)
dim(Z)
u = Z %*% matrix( rnorm(6*4000,0,.10), nrow=6)
dim(u)
u[,1:10]
dim(u)
H
H %*% u
u[,1]
K = matrix(0,7,11)
K[1,1] = 1
K
K[2:3,2] = 1
K
K[4:7,3] = 1
K
K[2,4]=1
K
K[3,5]=1
K
K[6:6,6] = 1
K
K[6:7,6] = 1
K
#------------------------------------------------------------
# TOPALS fitting function
#
# Carl Schmertmann
#   created 01 Mar 2018
#   edited  02 Mar 2018
#
# Fits TOPALS parameters to single-year (D,N) data by
# Newton-Raphson iteration with analytical derivatives
#
# A more complete explanation is in
# https://github.com/schmert/TOPALS/blob/master/TOPALS_fitting.pdf
#------------------------------------------------------------
rm(list=ls())
graphics.off()
if (.Platform$OS.type == 'windows') windows(record=TRUE)
library(splines)
#==== THIS IS THE MAIN FUNCTION ====
TOPALS_fit = function( N, D, std,
max_age        = 99,
knot_positions = c(0,1,10,20,40,70),
smoothing_k    = 1,
max_iter       = 20,
alpha_tol      = .00005,
details        = FALSE) {
## single years of age from 0 to max_age
age = 0:max_age
## B is an Ax7 matrix. Each column is a linear B-spline basis function
B      = splines::bs( age, knots=knot_positions, degree=1 )
nalpha = ncol(B)
## penalized log lik function
Q = function(alpha) {
lambda.hat = as.numeric( std + B %*% alpha)
penalty    = smoothing_k * sum( diff(alpha)^2 )
return( sum(D * lambda.hat - N * exp(lambda.hat)) - penalty)
}
## expected deaths function
Dhat = function(alpha) {
lambda.hat = std + B %*% alpha
return(  as.numeric( N * exp(lambda.hat) ))
}
## S matrix for penalty
S = matrix(0,nalpha-1,nalpha)
diag(S[, 1:(nalpha-1)]) = -1
diag(S[, 2:(nalpha)  ]) = +1
SS = crossprod(S)
#------------------------------------------------
# iteration function:
# next alpha vector as a function of current alpha
#------------------------------------------------
next_alpha = function(alpha) {
dhat = Dhat(alpha)
M = solve ( t(B) %*% diag(dhat) %*% B + 2*smoothing_k *SS)
v = t(B) %*% (D - dhat) - 2* (smoothing_k * (SS %*% alpha))
return( alpha + M %*% v)
}
## main iteration:
a = rep(0, nalpha)
niter = 0
repeat {
niter      = niter + 1
last_param = a
a          = next_alpha( a )  # update
change     = a - last_param
converge = all( abs(change) < alpha_tol)
overrun  = (niter == max_iter)
if (converge | overrun) { break }
} # repeat
if (details | !converge | overrun) {
if (!converge) print('did not converge')
if (overrun) print('exceeded maximum number of iterations')
return( list( alpha    = a,
Qvalue   = Q(a),
converge = converge,
maxiter  = overrun))
} else return( a)
} # TOPALS_fit
#==== END MAIN FUNCTION ====
#-----------------------------------------------------
# EXAMPLES: SMALL POPULATIONS WITH RANDOM DEATHS
#-----------------------------------------------------
age = 0:99
## Population by Age (5000 females, age structure similar to Estonia 2010)
N = c(62, 62, 50, 65, 56, 56, 40, 50, 43, 50,
42, 39, 34, 43, 45, 42, 53, 42, 45, 72,
66, 65, 63, 67, 64, 78, 65, 69, 65, 60,
70, 57, 46, 64, 58, 62, 59, 69, 69, 76,
69, 56, 58, 61, 50, 52, 79, 65, 75, 78,
73, 62, 76, 63, 83, 63, 61, 77, 84, 67,
72, 62, 60, 60, 50, 55, 37, 48, 75, 51,
59, 66, 71, 45, 46, 45, 44, 58, 50, 40,
34, 42, 27, 35, 25, 25, 25, 18, 16,  5,
2,  7,  2,  0,  5,  1,  1,  0,  1,  0)
## true mortality rates (Estonia 2010 from HMD)
mu = c(0.00246, 0.00064, 0.00026, 0.00014, 0.00014,
0.00059, 0.00031, 0.00016,       0,       0,
0.00034,       0, 0.00018,       0, 0.00016,
0.00047, 0.00015, 0.00013,       0, 0.00023,
0.00021,   2e-04,   1e-04, 0.00021, 0.00053,
0.00073, 0.00021, 0.00085, 0.00033, 0.00033,
0.00045, 0.00079, 0.00034, 0.00045, 0.00077,
0.00066, 0.00077, 0.00099, 0.00074, 0.00096,
0.00127, 0.00099, 0.00103,   7e-04, 0.00220,
0.00177, 0.00263, 0.00247, 0.00171, 0.00189,
0.00408, 0.00297, 0.00326, 0.00285, 0.00402,
0.00441, 0.00584, 0.00485, 0.00475, 0.00484,
0.00740, 0.00782, 0.00777, 0.01002, 0.01080,
0.01277, 0.01026, 0.01350, 0.01316, 0.01467,
0.01353, 0.01839, 0.02011, 0.02176, 0.02507,
0.02801, 0.03008, 0.03849, 0.04071, 0.05160,
0.05487, 0.06088, 0.06675, 0.07599, 0.08657,
0.09597, 0.12556, 0.11733, 0.14262, 0.16010,
0.17928, 0.20020, 0.22290, 0.24739, 0.27361,
0.30150, 0.33094, 0.36176, 0.39377, 0.42671)
## A reasonable standard schedule of log mortality rates: USA females 2015 from HMD
this.std = c(-5.2232, -7.9576, -8.3774, -8.7403, -8.948,
-9.1150, -9.0280, -9.2103, -9.2103, -9.4335,
-9.4335, -9.2103, -9.1150, -8.8049, -8.6797,
-8.6226, -8.3349, -8.1807, -7.9294, -7.8240,
-7.7994, -7.6843, -7.6843, -7.6417, -7.5811,
-7.4876, -7.4876, -7.4021, -7.3540, -7.2934,
-7.2089, -7.1691, -7.0586, -7.0243, -6.9911,
-6.9486, -6.8308, -6.8124, -6.7338, -6.7338,
-6.6377, -6.5362, -6.4440, -6.3830, -6.2818,
-6.2047, -6.1193, -6.0407, -5.9257, -5.8500,
-5.7477, -5.6636, -5.5649, -5.4846, -5.4194,
-5.3475, -5.2572, -5.1832, -5.1127, -5.0625,
-5.0071, -4.9281, -4.8422, -4.7689, -4.7094,
-4.6356, -4.5497, -4.4542, -4.3788, -4.2723,
-4.1819, -4.0757, -3.9660, -3.8859, -3.8126,
-3.6977, -3.6071, -3.4917, -3.4016, -3.2834,
-3.1696, -3.0791, -2.9481, -2.8382, -2.7308,
-2.6140, -2.5092, -2.3710, -2.2583, -2.1670,
-2.0485, -1.935,  -1.8211, -1.6996, -1.6052,
-1.5011, -1.4032, -1.3082, -1.2165, -1.1282)
# trapez approx of life expectancy from a logmx schedule over ages 0..99
e0 = function(logmx) {
mx = exp(logmx)
px = exp(-mx)
lx = c(1,cumprod(px))
return( sum(head(lx,-1) + tail(lx,-1)) / 2)
}
#-----------------------------------------------------
# EXAMPLE 1: TOPALS Defaults
#-----------------------------------------------------
set.seed(6447100)   # change this if you want a different random dataset
## Draw random samples of deaths D ~ Poisson(N*mu). Fit and display TOPALS model.
nsim = 10
B  = bs( 0:99, knots=c(0,1,10,20,40,70), degree=1 )
true_e0 = round( e0(log(mu)), 2)
for (i in 1:nsim) {
D = rpois(100, N*mu)   # random deaths
fitted_alpha = TOPALS_fit( N, D, this.std)
fitted_logmx = this.std + B %*% fitted_alpha
this.e0    = e0(fitted_logmx)
this.title = paste0('Sample # ',i, ' of ',nsim,': TOPALS\nfitted e0= ', round(this.e0,2),
' true e0= ', true_e0)
plot( age, log(D/N), ylim=c(-10,0), pch='+', cex=1.2, main=this.title)
rug( age[D==0], lwd=2)
lines(age, this.std, type='l', lty=2, col='grey', lwd=3)
lines(age, fitted_logmx, lty=1, col='red', lwd=3)
}
#-----------------------------------------------------
# EXAMPLE 2: Very high penalty, in which case
# TOPALS = indirect standardization
#        = up and down shifts of standard schedule
#-----------------------------------------------------
nsim = 10
B  = bs( 0:99, knots=c(0,1,10,20,40,70), degree=1 )
true_e0 = round( e0(log(mu)), 2)
for (i in 1:nsim) {
D = rpois(100, N*mu)   # random deaths
fitted_alpha = TOPALS_fit( N, D, this.std, smoothing_k = 10000)  #<<<<<<
fitted_logmx = this.std + B %*% fitted_alpha
this.e0    = e0(fitted_logmx)
this.title = paste0('Sample # ',i, ' of ',nsim,': TOPALS with high smoothing_k\nfitted e0= ', round(this.e0,2),
' true e0= ', true_e0)
plot( age, log(D/N), ylim=c(-10,0), pch='+', cex=1.2, main=this.title)
rug( age[D==0], lwd=2)
lines(age, this.std, type='l', lty=2, col='grey', lwd=3)
lines(age, fitted_logmx, lty=1, col='blue', lwd=3)
}
#-----------------------------------------------------
# EXAMPLE 3: applying TOPALS_fit to a large number of
#  datasets in one command
#-----------------------------------------------------
npop = 1000   # number of populations
# each col of D is a sample of deaths over ages 0..99
D = matrix( rpois( npop*100, N*mu), nrow=100)
# estimate TOPALS parameters for all npop populations in one command
# on a std desktop PC (circa 2014) this takes <1 sec for 1000 fits
system.time ({a = sapply( 1:ncol(D), function(i) TOPALS_fit(N, D[,i], std=this.std))})
L = this.std + B %*% a   # 100 x npop matrix of fitted logmx schedules
Lquant = t( apply(L, 1, quantile, c(.10,.50,.90)) )  # 100 x 3
plot(age, Lquant[,'50%'], type='n', ylim=c(-10,0),
xlab='age',ylab='logmx',
main=paste('10,50,90%iles of logmx\nacross',npop,'samples'))
segments(age, Lquant[,'10%'], age, Lquant[,'90%'], col='darkgrey' )
points(age, Lquant[,'50%'], pch=16, cex=.80)
## estimated life expectancies across samples
esim = apply(L, 2, e0)
plot(density(esim, adjust=1.5), main=paste('Density of e0\nacross',npop,'samples'),
lwd=3, bty='l')
equant = quantile(esim, c(.10,.50,.90))
segments( equant['10%'], 0, equant['90%'], 0, lwd=2)
points( equant['50%'], 0, pch=16, cex=1.2)
abline(v= true_e0, lty=2)
## compare to optim() approach, which seems to take about 20-30 times longer
## and be slightly less accurate
# control params for nonlinear fitting
this.control = list(maxit=1000,fnscale= -1, parscale=rep(.01,ncol(B)))
alpha0 = rep(0, 7)  # initial offsets (all 0 means start at standard schedule)
Q = function(alpha,N,D,std, smoothing_k=1) {
lambda.hat = as.numeric( std + B %*% alpha)
penalty    = smoothing_k * sum( diff(alpha)^2 )
return( sum(D * lambda.hat - N * exp(lambda.hat)) - penalty)
}
system.time( {
a.optim =
sapply(1:ncol(D), function(j) {
optim( alpha0, Q,
D=D[,j], N=N,
std=this.std,
method='BFGS', control=this.control)$par }) }
)
#--- compare maximized Q values
Q.optim = sapply(1:ncol(D),  function(j)  Q(a.optim[,j], N=N,D=D[,j],std=this.std) )
Q.NR    = sapply(1:ncol(D),  function(j)  Q(a[,j],       N=N,D=D[,j],std=this.std) )
plot(Q.optim, Q.NR)
abline(0,1,col=2)
plot( sort( Q.NR - Q.optim), seq(Q.NR)/length(Q.NR), type='s',
xlab='Change in Objective',ylab='',
main='Improvement with Newton-Raphson\nCumul Dist of Q.NR-Q.optim')
#--- compare estimated life expectancies
L.optim = this.std + B %*% a.optim
esim.optim = apply(L.optim, 2, e0)
plot(esim.optim, esim, ylab='Newton-Raphson', xlab='optim( )',
main='e0 estimates across 1000 samples')
abline(0,1,col=2)
abline(h=true_e0, v=true_e0, lty=2)
# a few examples
sel = sample(ncol(D), 5)
for (j in sel) {
plot( age, log(D[,j]/N), pch='+', cex=1.2, main=paste('Sample #',j),
ylim=c(-10,.10), ylab='logmx')
lines(age, L[,j], col='purple', lwd=2)
lines(age, L.optim[,j], col='red', lwd=2, lty=2)
segments(age,0, age, L[,j]-L.optim[,j], col='purple')
abline(h=0)
legend( 65,-5, c('Newton-R','optim( )'), lwd=2,lty=c(1,2),
col=c('purple','red'), bty='n', cex=.80)
}
setwd("~/GitHub/TOPALS")
source('~/GitHub/TOPALS/example with comparison to alternative optimizer.R', echo=TRUE)
source('~/GitHub/TOPALS/example with comparison to alternative optimizer.R', echo=TRUE)
setwd("~/GitHub/TOPALS")
source('~/GitHub/TOPALS/example with standard error calculation.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/TOPALS/example with standard error calculation.R', encoding = 'UTF-8', echo=TRUE)
plot( age, log(D/N), pch='+',ylim=c(-10,0),
main='Pará de Minas females 2010\nTOPALS fit +95% CI')
rug(age[D==0], side=1, ticksize=.015)
lines(age, HMD_female_std, lty=1, lwd=3, col='grey')
points(age, fitted_logmx, cex=.80, pch=16, col='firebrick')
Q10 = fitted_logmx -1.96 * se_logmx
Q90 = fitted_logmx +1.96 * se_logmx
segments( age, Q10, age, Q90, col='firebrick', lwd=.60)
plot( age, log(D/N), pch='+',cex=1.2,ylim=c(-10,0),
main='Pará de Minas females 2010\nTOPALS fit +95% CI')
rug(age[D==0], side=1, ticksize=.015)
lines(age, HMD_female_std, lty=1, lwd=3, col='grey')
points(age, fitted_logmx, cex=.80, pch=16, col='firebrick')
Q10 = fitted_logmx -1.96 * se_logmx
Q90 = fitted_logmx +1.96 * se_logmx
segments( age, Q10, age, Q90, col='firebrick', lwd=.60)
source('~/GitHub/TOPALS/example with standard error calculation.R', encoding = 'UTF-8', echo=TRUE)
CH = t( chol( fit$covar))
## simulate alpha values using a multivar normal approx
nsim = 20
sim_alpha = as.numeric(fit$a) +
CH %*% matrix( rnorm(nsim*length(fit$a)),
ncol=nsim)
dim(sim_alpha)
sim_alpha[,1:3]
sim_lambda = HMD_female_std + B %*% sim_alpha
dim(sim_lambda)
matplot( age, sim_lambda)
nsim  = 1000
nshow = 20
sim_alpha = as.numeric(fit$a) +
CH %*% matrix( rnorm(nsim*length(fit$a)),
ncol=nsim)
sim_lambda = HMD_female_std + B %*% sim_alpha
matplot( age, sim_lambda[,1:nshow], type='l')
# trapez approx of life expectancy from a logmx schedule over ages 0..99
e0 = function(logmx) {
mx = exp(logmx)
px = exp(-mx)
lx = c(1,cumprod(px))
return( sum(head(lx,-1) + tail(lx,-1)) / 2)
}
sim_e0 = apply(sim_lambda, 2, 'e0')
head(e0)
head(sim_e0)
round( head( sim_e0), 2)
source('~/GitHub/TOPALS/example with standard error calculation.R', encoding = 'UTF-8', echo=TRUE)
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
sim_e0 = apply(sim_lambda, 2, 'e0')
Q10 = quantile(sim_e0, .10)
Q50 = quantile(sim_e0, .50)
Q90 = quantile(sim_e0, .90)
round( head( sim_e0), 2)
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .03, '80% interval')
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .04, '80% interval')
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .06, '80% interval')
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0 estimated from uncertainty about alpha')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .06, '80% interval')
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0\nestimated from uncertainty about alpha')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .06, '80% interval')
matplot( age, sim_lambda[,1:nshow], type='l',
main='Simulated schedules\nusing mean and covar of alpha offsets')
#########################################################################
# example using estimated standard errors of log mortality
# same data as Fig 1 in Gonzaga and Schmertmann 2016
#########################################################################
rm(list=ls())
graphics.off()
if (.Platform$OS.type == 'windows') windows(record=TRUE)
library(splines)
age = 0:99
B   = bs( 0:99, knots=c(0,1,10,20,40,70), degree=1 )
## Pará de Minas female data and HMD female standard
N = c(2289.1, 2278.6, 2321.8, 2367.8, 2431.4, 2473.6, 2530.7, 2661.3,
2784.2, 2946.3, 2991.4, 3038, 3072.8, 3193.9, 3302.5, 3315.5,
3272.8, 3182.7, 3165.3, 3183, 3232.3, 3259.5, 3221.7, 3178, 3077.6,
3028.8, 3030.1, 3153.1, 3223.5, 3313.3, 3246.7, 3217.3, 3051.5,
2991.8, 2887.3, 2810.4, 2770.1, 2791.6, 2851.9, 2878.9, 2877.1,
2860.8, 2746, 2680.1, 2668.4, 2712.5, 2682.3, 2545.6, 2450.2,
2360.2, 2308.6, 2222.3, 2154.8, 2118.1, 2057.1, 1953.8, 1809.8,
1694, 1597.1, 1553.1, 1467.8, 1397.9, 1317.1, 1281.3, 1260.5,
1214.1, 1147.3, 1045.1, 955.8, 886.1, 843.5, 815.5, 804.6, 785.4,
749, 710, 659.8, 594.8, 557, 523.5, 497.1, 447.6, 400.2, 358.1,
305.4, 253.5, 226.5, 200.2, 171.6, 134.6, 111.5, 94.1, 83.3,
76.4, 54, 35.5, 16.6, 12, 13.4, 13.6)
D = c(21L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
1L, 3L, 0L, 1L, 0L, 4L, 3L, 2L, 2L, 2L, 3L, 3L, 0L, 2L, 2L, 7L,
4L, 4L, 5L, 3L, 2L, 5L, 2L, 9L, 3L, 5L, 8L, 6L, 9L, 9L, 2L, 2L,
5L, 18L, 8L, 13L, 11L, 7L, 13L, 10L, 15L, 11L, 8L, 9L, 4L, 10L,
5L, 11L, 10L, 9L, 16L, 20L, 11L, 10L, 16L, 14L, 22L, 18L, 20L,
21L, 22L, 22L, 10L, 23L, 20L, 24L, 19L, 24L, 21L, 20L, 20L, 26L,
27L, 24L, 13L, 18L, 13L, 15L, 12L, 11L, 7L, 8L, 2L, 3L, 5L)
HMD_female_std =
c(-5.1434, -6.9847, -8.1263, -8.296, -8.475, -8.6084, -8.7217,
-8.8148, -8.8967, -8.933, -8.9716, -8.9725, -8.9353, -8.8044,
-8.6244, -8.4125, -8.2371, -8.084, -7.9726, -7.9208, -7.9235,
-7.9242, -7.9292, -7.9346, -7.911, -7.8563, -7.8009, -7.7772,
-7.7247, -7.6466, -7.5585, -7.5035, -7.4414, -7.3672, -7.2642,
-7.1601, -7.0877, -7.0044, -6.908, -6.8007, -6.7229, -6.6227,
-6.5213, -6.4139, -6.3197, -6.2298, -6.1335, -6.0364, -5.934,
-5.8394, -5.7533, -5.6695, -5.5882, -5.5047, -5.422, -5.3325,
-5.2444, -5.1596, -5.0766, -4.9908, -4.9012, -4.8086, -4.718,
-4.6262, -4.5331, -4.4375, -4.3396, -4.2397, -4.1368, -4.0272,
-3.919, -3.8085, -3.6981, -3.5805, -3.4648, -3.3469, -3.2321,
-3.1152, -2.9968, -2.8732, -2.7562, -2.6382, -2.5215, -2.4009,
-2.2871, -2.1739, -2.0632, -1.9559, -1.8517, -1.7465, -1.6463,
-1.5501, -1.4579, -1.3665, -1.2765, -1.1861, -1.1002, -1.02,
-0.9429, -0.8695)
####################################################
source('TOPALS_fit function.R')
fit = TOPALS_fit( N, D, HMD_female_std, details=TRUE)
fitted_logmx = HMD_female_std + B %*% fit$a
# standard errors for fitted logmx
se_logmx = sqrt( diag (B %*% fit$covar %*% t(B)) )
plot( age, log(D/N), pch='+',cex=1.2,ylim=c(-10,0),
main='Pará de Minas females 2010\nTOPALS fit +95% CI')
rug(age[D==0], side=1, ticksize=.015)
lines(age, HMD_female_std, lty=1, lwd=3, col='grey')
points(age, fitted_logmx, cex=.80, pch=16, col='firebrick')
L = fitted_logmx - 1.96 * se_logmx
H = fitted_logmx + 1.96 * se_logmx
segments( age, L, age, H, col='firebrick', lwd=.60)
#-----------------------------------------
# uncertainty about alpha offsets
# means uncertainty about log mortality
# and about indices like e0
#-----------------------------------------
# Cholesky decomp of Var(alpha-hat)
CH = t( chol( fit$covar))
## simulate alpha vectors using a multivar normal approx
nsim  = 1000
nshow = 20
sim_alpha = as.numeric(fit$a) +
CH %*% matrix( rnorm(nsim*length(fit$a)),
ncol=nsim)
sim_lambda = HMD_female_std + B %*% sim_alpha
matplot( age, sim_lambda[,1:nshow], type='l',
main='Simulated schedules\nusing mean and covar of alpha offsets')
# trapez approx of life expectancy from a logmx schedule over ages 0..99
e0 = function(logmx) {
mx = exp(logmx)
px = exp(-mx)
lx = c(1,cumprod(px))
return( sum(head(lx,-1) + tail(lx,-1)) / 2)
}
sim_e0 = apply(sim_lambda, 2, 'e0')
Q10 = quantile(sim_e0, .10)
Q50 = quantile(sim_e0, .50)
Q90 = quantile(sim_e0, .90)
round( head( sim_e0), 2)
plot( density(sim_e0, adjust=1.5),
main='Pará de Minas females 2010\nUncertainty about e0\nestimated from uncertainty about alpha')
points( Q50, .02, pch=16, cex=1.2)
segments(Q10, .02, Q90, .02, lwd=1.2)
text( Q50, .06, '80% interval')
